- hosts: localhost
  connection: local
  gather_facts: Flase
  tasks:
    - name: Import VPC Variables
      include_vars: vars/vpc_setup

    - name: Create vprofile vpc
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCidr}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        tenancy: default
        state : "{{state}}"
      register: vpcout

#    - debug:
#       var: vpcout


#here register will store all data in vpcout i.e, output will store in vpcout

#tag/reresource_tags

    - name: create a public subnet 1 in zone1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        cidr: "{{PubSub1Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub1
      register: pubsub1_out

    - name: create a public subnet 2 in zone2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{PubSub2Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub2              
      register: pubsub2_out

    - name: create a public subnet 3 in zone3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone3}}"
        state: "{{state}}"
        cidr: "{{PubSub3Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-pubsub3
      register: pubsub3_out

    - name: create a private subnet 1 in zone1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        cidr: "{{PrivSub1Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-privatesub1
      register: prisub1_out
    
    - name: create a private subnet 2 in zone2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{PrivSub2Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-privatesub2
      register: prisub2_out

    - name: create a private subnet 3 in zone3
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone3}}"
        state: "{{state}}"
        cidr: "{{PrivSub3Cidr}}"
        map_public: yes
        resource_tags:
          Name: vprofile-privatesub3
      register: prisub3_out

    - name: Internet Gateway Setup
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: vprofile-IGW
      register: IGW_out

    - name: Set up public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: vprofile-publicroute
        subnets:
          - "{{ pubsub1_out.subnet.id }}"
          - "{{ pubsub2_out.subnet.id }}"
          - "{{ pubsub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ IGW_out.gateway_id }}"
      register: public_route_out

    - name: Create new nat gateway and allocate new EIP if a nat gateway does not yet exist in the subnet.
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{pubsub1_out.subnet.id}}"
        wait: yes
        region: "{{region}}"
        if_exist_do_not_create: true
      register: natGW_out

    - debug:
        var: natGW_out

    - name: Set up private subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        tags:
          Name: vprofile-privateroute
        subnets:
          - "{{ prisub1_out.subnet.id }}"
          - "{{ prisub2_out.subnet.id }}"
          - "{{ prisub3_out.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ natGW_out.nat_gateway_id }}"
      register: private_route_out

    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - pubsub1_out.subnet.id
        - pubsub2_out.subnet.id
        - pubsub3_out.subnet.id
        - prisub1_out.subnet.id
        - prisub2_out.subnet.id
        - prisub3_out.subnet.id
        - IGW_out.gateway_id
        - public_route_out.route_table.id
        - natGW_out.nat_gateway_id
        - private_route_out.route_table.id

    - set_fact:
        vpcid: "{{vpcout.vpc.id}}"
        pubsub1id: "{{pubsub1_out.subnet.id}}"
        pubsub2id: "{{pubsub2_out.subnet.id}}"
        pubsub3id: "{{pubsub3_out.subnet.id}}"
        prisub1id: "{{prisub1_out.subnet.id}}"
        prisub2id: "{{prisub2_out.subnet.id}}"
        prisub3id: "{{prisub3_out.subnet.id}}"
        igwid: "{{IGW_out.gateway_id}}"
        pubRTid: "{{public_route_out.route_table.id}}"
        NATGWid: "{{natGW_out.nat_gateway_id}}"
        privRTid: "{{private_route_out.route_table.id}}"
        cacheable: yes

    - name: create variables files for vpc output
      copy:
        content: "vpcid: {{vpcout.vpc.id}}\npubsub1id: {{pubsub1_out.subnet.id}}\npubsub2id: {{pubsub2_out.subnet.id}}\npubsub3id: {{pubsub3_out.subnet.id}}\nprisub1id: {{prisub1_out.subnet.id}}\nprisub2id: {{prisub2_out.subnet.id}}\nprisub3id: {{prisub3_out.subnet.id}}\nigwid: {{IGW_out.gateway_id}}\npubRTid: {{public_route_out.route_table.id}}\nNATGWid: {{natGW_out.nat_gateway_id}}\nprivRTid: {{private_route_out.route_table.id}}"
        dest: vars/output_varsID

